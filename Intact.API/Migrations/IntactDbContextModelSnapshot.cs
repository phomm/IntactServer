// <auto-generated />
using Intact.BusinessLogic.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Intact.API.Migrations
{
    [DbContext(typeof(IntactDbContext))]
    partial class IntactDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Intact.BusinessLogic.Data.Models.FactionDao", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<string>("TermDescription")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasComputedColumnSql("\"Id\" || 'FactionDescription'", true);

                    b.Property<string>("TermName")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasComputedColumnSql("\"Id\" || 'FactionName'", true);

                    b.HasKey("Id");

                    b.ToTable("Factions");
                });

            modelBuilder.Entity("Intact.BusinessLogic.Data.Models.LocalizationDao", b =>
                {
                    b.Property<string>("TermId")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("LanguageCode")
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(950)
                        .HasColumnType("character varying(950)");

                    b.HasKey("TermId", "LanguageCode");

                    b.ToTable("Localizations");
                });

            modelBuilder.Entity("Intact.BusinessLogic.Data.Models.MapBuildingDao", b =>
                {
                    b.Property<string>("MapId")
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<string>("Proto")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<int>("X")
                        .HasColumnType("integer");

                    b.Property<int>("Y")
                        .HasColumnType("integer");

                    b.HasKey("MapId", "Number");

                    b.ToTable("MapBuildings");
                });

            modelBuilder.Entity("Intact.BusinessLogic.Data.Models.MapDao", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.Property<string>("Factions")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<int>("Height")
                        .HasColumnType("integer");

                    b.Property<string>("SceneBackground")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TermDescription")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasComputedColumnSql("\"Id\" || 'MapDescription'", true);

                    b.Property<string>("TermName")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasComputedColumnSql("\"Id\" || 'MapName'", true);

                    b.Property<int>("Width")
                        .HasMaxLength(32)
                        .HasColumnType("integer");

                    b.HasKey("Id", "Version");

                    b.ToTable("Maps");
                });

            modelBuilder.Entity("Intact.BusinessLogic.Data.Models.PlayerOptionsDao", b =>
                {
                    b.Property<string>("MapId")
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<int>("Bottom")
                        .HasColumnType("integer");

                    b.Property<int>("Color")
                        .HasColumnType("integer");

                    b.Property<int>("Left")
                        .HasColumnType("integer");

                    b.Property<int>("Money")
                        .HasColumnType("integer");

                    b.Property<int>("Right")
                        .HasColumnType("integer");

                    b.Property<int>("Top")
                        .HasColumnType("integer");

                    b.HasKey("MapId", "Number");

                    b.ToTable("PlayerOptions");
                });

            modelBuilder.Entity("Intact.BusinessLogic.Data.Models.ProtoBuildingDao", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<string>("AssetId")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("BuildingType")
                        .HasColumnType("integer");

                    b.Property<byte>("InLife")
                        .HasColumnType("smallint");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<string>("TermDescription")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasComputedColumnSql("\"Id\" || 'BuildingDescription'", true);

                    b.Property<string>("TermName")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasComputedColumnSql("\"Id\" || 'BuildingName'", true);

                    b.HasKey("Id");

                    b.ToTable("ProtoBuildings");
                });

            modelBuilder.Entity("Intact.BusinessLogic.Data.Models.ProtoWarriorDao", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<string>("AssetId")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<byte>("Cost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)0);

                    b.Property<string>("FactionId")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<int>("Force")
                        .HasColumnType("integer");

                    b.Property<byte>("InActs")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)1);

                    b.Property<byte>("InLife")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)1);

                    b.Property<byte>("InMana")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)0);

                    b.Property<byte>("InMoves")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)1);

                    b.Property<byte>("InShots")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)0);

                    b.Property<bool>("IsBlockFree")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsHero")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsImmune")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsMelee")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsRanged")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<string>("TermDescription")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasComputedColumnSql("\"Id\" || 'WarriorDescription'", true);

                    b.Property<string>("TermName")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasComputedColumnSql("\"Id\" || 'WarriorName'", true);

                    b.HasKey("Id");

                    b.ToTable("ProtoWarriors");
                });
#pragma warning restore 612, 618
        }
    }
}
